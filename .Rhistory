library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "D:/BioInfoDocument/sc_rna_data")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
View(pbmc)
View(pbmc.data)
View(pbmc)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
savePlot(filename = fig,type = "pdf")
pdf(file = "plot.pdf", width = 6, height = 4)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
pwd
wd
pdir
pd
getwd()
pdf(file = "plot.pdf", width = 6, height = 10)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
pdf(file = "plot.pdf", width = 12, height = 20)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap",label=FALSE)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap",label=TRUE)
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A"))
library(dplyr)
library(Seurat)
library(patchwork)
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
acc_h <- CreateSeuratObject(counts = acc_h.data, project = "acc_h", min.cells = 3, min.features = 200)
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
acc_h <- CreateSeuratObject(counts = acc_h.data, project = "acc_h", min.cells = 3, min.features = 200)
acc_h
#  This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
#  This is a great place to stash QC stats
acc_h[["percent.mt"]] <- PercentageFeatureSet(acc_h, pattern = "^MT-")
head(pbmc@meta.data, 5)
head(acc_h@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Visualize QC metrics as a violin plot
VlnPlot(acc_h, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(acc_h, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(acc_h, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
acc_h <- subset(acc_h, subset = nFeature_RNA > 100 & nFeature_RNA < 5000 & percent.mt < 5)
# Visualize QC metrics as a violin plot
VlnPlot(acc_h, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
acc_h <- NormalizeData(acc_h, normalization.method = "LogNormalize", scale.factor = 10000)
acc_h <- FindVariableFeatures(acc_h, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(acc_h), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(acc_h)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
plot1 + plot2
rlang::last_trace()
all.genes <- rownames(acc_h)
acc_h <- ScaleData(acc_h, features = all.genes)
# Examine and visualize PCA results a few different ways
print(acc_h[["pca"]], dims = 1:5, nfeatures = 5)
acc_h <- RunPCA(acc_h, features = VariableFeatures(object = acc_h))
# Examine and visualize PCA results a few different ways
print(acc_h[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(acc_h, dims = 1:2, reduction = "pca")
# Examine and visualize PCA results a few different ways
print(acc_h[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(acc_h, dims = 1:2, reduction = "pca")
DimPlot(acc_h, reduction = "pca") + NoLegend()
pdf(file = "plot.pdf", width = 12, height = 20)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
pdf(file = "plot.pdf", width = 12, height = 20)
DimHeatmap(acc_h, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
ElbowPlot(acc_h)
ElbowPlot(acc_h)
acc_h <- FindNeighbors(acc_h, dims = 1:20)
acc_h <- FindClusters(acc_h, resolution = 0.5)
pbmc <- RunUMAP(acc_h, dims = 1:10)
acc_h <- RunUMAP(acc_h, dims = 1:10)
acc_h <- RunTSNE(acc_h, dims = 1:10)
acc_h <- RunTSNE(acc_h, dims = 1:20)
acc_h <- RunTSNE(acc_h, dims = 1:20)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(acc_h, reduction = "TSNE",label=TRUE)
View(pbmc)
View(acc_h)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(acc_h, reduction = "tsne",label=TRUE)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf(file = "cell_map.pdf", width = 12, height = 14)
DimPlot(acc_h, reduction = "tsne",label=TRUE)
dev.off()
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf(file = "cell_map.pdf", width = 8, height = 6)
DimPlot(acc_h, reduction = "tsne",label=TRUE)
dev.off()
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
pdf(file = "cell_map.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf(file = "cell_map.pdf", width = 8, height = 6)
DimPlot(acc_h, reduction = "tsne",label=TRUE)
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("GAD1", "TAM1", "RELN", "GJA1", "CALB1", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("GAD1", "TAM1", "RELN", "GJA1",
"FOLH1"))
dev.off()
version()
v
v()
update()
install.packages("installr")
require(installr)
updateR()
install.packages("gggenomes")
library(shiny)
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
source("D:/MyFile/git_repo/TRkScan/plotScripts/triangular_heatmap.R", echo=TRUE)
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
install.packages("ggraph")
install.packages("igraph")
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
install.packages("visNetwork")
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(ggplot2)
library(igraph)
library(visNetwork)
library(stringr)
setwd('D:/MyFile/git_repo/TRkScan')
contrast <- c("#D00000","#3185FC","#FFBA08","#5D2E8C","#8FE388","#FF9B85","#8c5c2b","#696663") # 7 colors
source("D:/MyFile/git_repo/TRkScan/plotScripts/plot.R", echo=TRUE)
source("D:/MyFile/git_repo/TRkScan/plotScripts/plot.R", echo=TRUE)
source("D:/MyFile/git_repo/TRkScan/plotScripts/plot.R", echo=TRUE)
library(ggplot2)
library(igraph)
library(visNetwork)
library(stringr)
setwd('D:/MyFile/git_repo/TRkScan')
contrast <- c("#D00000","#3185FC","#FFBA08","#5D2E8C","#8FE388","#FF9B85","#8c5c2b","#696663") # 7 colors
filename <- "testData/bo_chr2a_14110848-14463880.concise.tsv"
concise = read.table(filename, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
filename <- "testData/bo_chr2a_14110848-14463880.annotation.tsv"
annotation = read.table(filename, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
filename <- "testData/bo_chr2a_14110848-14463880.motif.tsv"
motif = read.table(filename, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
tmp = motif
motif_list = tmp$motif
# tmp = tmp[motif_list]
result <- data.frame(motif1 = character(0), motif2 = character(0), distance = integer(0))
for(i in 1:(length(motif_list) - 1)){
for(j in (i+1):length(motif_list)){
# print(i,j)
motif1 <- motif_list[i]
motif2 <- motif_list[j]
distance1 <- as.integer(str_extract(tmp[tmp$motif == motif1, motif2], "^\\d+"))
result <- rbind(result, data.frame(motif1 = motif1, motif2 = motif2, distance = distance1))
}
}
result = result[order(result$distance), ]
rownames(result) <- 1:nrow(result)
result$rc = FALSE
dist = result
# distance (rc)
tmp = motif
motif_list = tmp$motif
# tmp = tmp[motif_list]
result <- data.frame(motif1 = character(0), motif2 = character(0), distance = integer(0))
for(i in 1:(length(motif_list) - 1)){
for(j in (i+1):length(motif_list)){
# print(i,j)
motif1 <- motif_list[i]
motif2 <- motif_list[j]
distance1 <- as.integer(str_extract(tmp[tmp$motif == motif1, motif2], "(?<=,)(\\d+)"))
result <- rbind(result, data.frame(motif1 = motif1, motif2 = motif2, distance = distance1))
}
}
result = result[order(result$distance), ]
rownames(result) <- 1:nrow(result)
result$rc = TRUE
dist_rc = result
motif_list <- unique(motif$motif)
# 创建空图并添加顶点
g <- make_empty_graph(directed = FALSE)
g <- add_vertices(g, length(motif_list), name = motif_list)
# 计算距离矩阵
if(input$merge_rc){
distance_df <- rbind(dist, dist_rc)
} else {
distance_df <- dist()
}
distance_df <- distance_df[order(distance_df$distance), ]
tmp_edges <- data.frame(from = integer(0), to = integer(0), value = integer(0))
distance_df <- rbind(dist, dist_rc)
distance_df <- distance_df[order(distance_df$distance), ]
tmp_edges <- data.frame(from = integer(0), to = integer(0), value = integer(0))
# 添加边并计算连通分量
num_components <- components(g)$no
if(num_components > input$num_of_motifs) {
for(i in 1:nrow(distance_df)) {
motif1 <- distance_df$motif1[i]
motif2 <- distance_df$motif2[i]
from_id <- which(motif_list == motif1)
to_id <- which(motif_list == motif2)
tmp_edges <- rbind(tmp_edges, data.frame(from = from_id, to = to_id,
value = min(length(motif1), length(motif2)) - distance_df$distance[i],
label = as.character(distance_df$distance[i]),
dashes = distance_df$rc[i]))
g <- add_edges(g, c(from_id, to_id))
num_components <- components(g)$no
if(num_components <= input$num_of_motifs) {
break
}
}
}
# 返回图和边的数据
graph_data = list(graph = g, edges = tmp_edges, motif_list = motif_list, distance_df = distance_df)
distance_df <- rbind(dist, dist_rc)
distance_df <- distance_df[order(distance_df$distance), ]
tmp_edges <- data.frame(from = integer(0), to = integer(0), value = integer(0))
# 添加边并计算连通分量
num_components <- components(g)$no
if(num_components > input$num_of_motifs) {
for(i in 1:nrow(distance_df)) {
motif1 <- distance_df$motif1[i]
motif2 <- distance_df$motif2[i]
from_id <- which(motif_list == motif1)
to_id <- which(motif_list == motif2)
tmp_edges <- rbind(tmp_edges, data.frame(from = from_id, to = to_id,
value = min(length(motif1), length(motif2)) - distance_df$distance[i],
label = as.character(distance_df$distance[i]),
dashes = distance_df$rc[i]))
g <- add_edges(g, c(from_id, to_id))
num_components <- components(g)$no
if(num_components <= input$num_of_motifs) {
break
}
}
}
# 添加边并计算连通分量
num_of_motifs = 100
num_components <- components(g)$no
if(num_components > num_of_motifs) {
for(i in 1:nrow(distance_df)) {
motif1 <- distance_df$motif1[i]
motif2 <- distance_df$motif2[i]
from_id <- which(motif_list == motif1)
to_id <- which(motif_list == motif2)
tmp_edges <- rbind(tmp_edges, data.frame(from = from_id, to = to_id,
value = min(length(motif1), length(motif2)) - distance_df$distance[i],
label = as.character(distance_df$distance[i]),
dashes = distance_df$rc[i]))
g <- add_edges(g, c(from_id, to_id))
num_components <- components(g)$no
if(num_components <= num_of_motifs) {
break
}
}
}
# 返回图和边的数据
graph_data = list(graph = g, edges = tmp_edges, motif_list = motif_list, distance_df = distance_df)
if(input$color == 'contrast'){
color_list = contrast
}else{
color_list = rainbow
}
color_list = contrast
g <- graph_data$graph
motif_list <- graph_data$motif_list
motif_rep_num <- motif$rep_num
# 获取连通分量和计算每个子图的权重总和
comp <- components(g)
print("#######")
### print(comp)
component_sizes <- sapply(unique(comp$membership), function(x) sum(motif_rep_num[comp$membership == x]) )
tmp <- data.frame( total_rep_num = component_sizes, old_cluster_id = unique(comp$membership))
tmp = tmp[order(tmp$total_rep_num, decreasing = TRUE),]
tmp$new_cluster_id = 1:nrow(tmp)
print(tmp)
old_cluster_id <- data.frame(old_cluster_id  = comp$membership)
code_color_id <- old_cluster_id %>%
left_join(tmp, by = "old_cluster_id") %>%
mutate(color_id = ifelse(new_cluster_id < length(color_list), new_cluster_id, length(color_list))) %>%
pull(color_id)
print(code_color_id)
library(dbplyr)
# 添加边并计算连通分量
num_of_motifs = 100
num_components <- components(g)$no
if(num_components > num_of_motifs) {
for(i in 1:nrow(distance_df)) {
motif1 <- distance_df$motif1[i]
motif2 <- distance_df$motif2[i]
from_id <- which(motif_list == motif1)
to_id <- which(motif_list == motif2)
tmp_edges <- rbind(tmp_edges, data.frame(from = from_id, to = to_id,
value = min(length(motif1), length(motif2)) - distance_df$distance[i],
label = as.character(distance_df$distance[i]),
dashes = distance_df$rc[i]))
g <- add_edges(g, c(from_id, to_id))
num_components <- components(g)$no
if(num_components <= num_of_motifs) {
break
}
}
}
# 返回图和边的数据
graph_data = list(graph = g, edges = tmp_edges, motif_list = motif_list, distance_df = distance_df)
color_list = contrast
g <- graph_data$graph
motif_list <- graph_data$motif_list
motif_rep_num <- motif$rep_num
# 获取连通分量和计算每个子图的权重总和
comp <- components(g)
print("#######")
### print(comp)
component_sizes <- sapply(unique(comp$membership), function(x) sum(motif_rep_num[comp$membership == x]) )
tmp <- data.frame( total_rep_num = component_sizes, old_cluster_id = unique(comp$membership))
tmp = tmp[order(tmp$total_rep_num, decreasing = TRUE),]
tmp$new_cluster_id = 1:nrow(tmp)
print(tmp)
old_cluster_id <- data.frame(old_cluster_id  = comp$membership)
code_color_id <- old_cluster_id %>%
left_join(tmp, by = "old_cluster_id") %>%
mutate(color_id = ifelse(new_cluster_id < length(color_list), new_cluster_id, length(color_list))) %>%
pull(color_id)
print(code_color_id)
library(dplyr)
old_cluster_id <- data.frame(old_cluster_id  = comp$membership)
code_color_id <- old_cluster_id %>%
left_join(tmp, by = "old_cluster_id") %>%
mutate(color_id = ifelse(new_cluster_id < length(color_list), new_cluster_id, length(color_list))) %>%
pull(color_id)
print(code_color_id)
# 生成排序后的节点信息
nodes = data.frame(id = 1:length(motif_list),
label = motif_list,
value = motif_rep_num,
color = color_list[code_color_id])
edges <- graph_data$edges
visNetwork(nodes(), edges(), directed = FALSE)
visNetwork(nodes, edges, directed = FALSE)
View(concise)
View(nodes)
concise$color = 'grey'
for(i in 1:nrow(concise)){
motif = concise[i,'motif']
concise[i,'color'] = nodes[nodes$label == motif, 'color']
}
ggplot(concise) +
geom_rect(x = (start + end) / 2, y = 1, height = 3, width = (end - start), fill = color)
concise$color = 'grey'
for(i in 1:nrow(concise)){
motif = concise[i,'motif']
concise[i,'color'] = nodes[nodes$label == motif, 'color']
}
concise$x_mid = (concise$start + concise$end)/2
concise$x_width = concise$end - concise$start
ggplot(concise) +
geom_rect(x = x_mid, y = 1, height = 3, width = x_width, fill = color)
concise$x_mid = (concise$start + concise$end)/2
concise$x_width = concise$end - concise$start
ggplot(concise) +
geom_rect(x = x_mid, y = 1, height = 3, width = x_width, fill = color)
ggplot(data = concise) +
geom_rect(x = x_mid, y = 1, height = 3, width = x_width, fill = color)
ggplot(data = concise) +
geom_rect(data = concise, x = x_mid, y = 1, height = 3, width = x_width, fill = color)
ggplot(data = concise, x = x_mid, y = 1, height = 3, width = x_width, fill = color) +
geom_rect(data = concise)
ggplot(data = concise, xmin = start, xmax = end, ymin = 1, ymax = 3, fill = color) +
geom_rect(data = concise)
ggplot(data = concise, xmin = start, xmax = end, ymin = 1, ymax = 3, fill = color) +
geom_rect()
ggplot(data = concise, aes(xmin = start, xmax = end, ymin = 1, ymax = 3, fill = color)) +
geom_rect()
ggplot(data = concise, aes(xmin = start, xmax = end, ymin = 1, ymax = 3, fill = color)) +
geom_rect() +
scale_fill_manual(values = contrast)
ggplot(data = concise, aes(xmin = start, xmax = end, ymin = 1, ymax = 3, fill = color)) +
geom_rect() +
scale_fill_manual(values = contrast) +
theme_void()
ggplot(data = concise, aes(xmin = start, xmax = end, ymin = 1, ymax = 3, fill = color)) +
geom_rect() +
scale_fill_manual(values = c("#D00000" = "#D00000","#3185FC" = "#3185FC","#FFBA08" = "#FFBA08","#5D2E8C" = "#5D2E8C","#8FE388" = "#8FE388",
"#FF9B85" = "#FF9B85","#8c5c2b" = "#8c5c2b","#696663" = "#696663")) +
theme_void()
