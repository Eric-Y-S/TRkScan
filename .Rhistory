# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(student1_data),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
student1_data, axistype = 1,
# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = c(1,2,3,4,5),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
c(12,20,16,8,11,17), axistype = 1,
# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = c("A","B","C","D","E","F"),
caxislabels = c(0, 5, 10, 15, 20))
data = c(12,20,16,8,11,17)
df = as.data.frame(data)
View(df)
radarchart(
df, axistype = 1,
# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = c("A","B","C","D","E","F"),
caxislabels = c(0, 5, 10, 15, 20))
df = read.csv("D:/MCM_python_code/radar.csv")
gc()
df = read.csv("D:/MCM_python_code/radar.csv")
df = read.csv("D:/MCM_python_code/radar.csv")
radarchart(
df, axistype = 1,
# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = c("A","B","C","D","E","F"),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df, axistype = 1,
# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = c("A","B","C","D","E"),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df, axistype = 1,
# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(student1_data),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df, axistype = 1,
# Customize the polygon
pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df, axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
View(df)
legend(
x = "name", legend = rownames(df[-c(1,2),]), horiz = TRUE,
bty = "n", pch = 20 , col = c("#00AFBB", "#E7B800", "#FC4E07"),
text.col = "black", cex = 1, pt.cex = 1.5
)
radarchart(
df["A","B","C","D","E"], axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
View(df)
df["A","B","C","D","E"]
radarchart(
df[,2], axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
df[,2]
radarchart(
df[,2:], axistype = 1,
df[,c(2,3,4,5,6)]
df[,c(2,3,4,5,6)]
radarchart(
df[,c(2,3,4,5,6)], axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df[,c(2,3,4,5,6)], axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df[,c(2,3,4,5,6)], axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 3, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df[,c(2,3,4,5,6)], axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
radarchart(
df, axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
str(DF)
str(df)
radarchart(
df[c(2,3,4,5,6),], axistype = 1,
# Customize the polygon
pcol = c("#00AFBB","#E7B800"), pfcol = scales::alpha(c("#00AFBB","#E7B800"), 0.5), plwd = 2, plty = 1,
# Customize the grid
cglcol = "grey", cglty = 1, cglwd = 0.8,
# Customize the axis
axislabcol = "grey",
# Variable labels
vlcex = 0.7, vlabels = colnames(df),
caxislabels = c(0, 5, 10, 15, 20))
install.packages("seurat")
install.packages("Seurat")
install.packages("spatstat.data")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "D:\BioInfoDocument\sc_rna_data")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "D:/BioInfoDocument/sc_rna_data")
library(dplyr)
library(Seurat)
library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "D:/BioInfoDocument/sc_rna_data")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
View(pbmc)
View(pbmc.data)
View(pbmc)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
# Examine and visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca") + NoLegend()
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
savePlot(filename = fig,type = "pdf")
pdf(file = "plot.pdf", width = 6, height = 4)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
pwd
wd
pdir
pd
getwd()
pdf(file = "plot.pdf", width = 6, height = 10)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
pdf(file = "plot.pdf", width = 12, height = 20)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
head(Idents(pbmc), 5)
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap",label=FALSE)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap",label=TRUE)
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A"))
library(dplyr)
library(Seurat)
library(patchwork)
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
acc_h <- CreateSeuratObject(counts = acc_h.data, project = "acc_h", min.cells = 3, min.features = 200)
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
# Load data
acc_h.data <- Read10X(data.dir = "F:/资料/科研/2024.3.17-FOLH1/scRNA-seq/GSE127774_ACC_H")
acc_h <- CreateSeuratObject(counts = acc_h.data, project = "acc_h", min.cells = 3, min.features = 200)
acc_h
#  This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
#  This is a great place to stash QC stats
acc_h[["percent.mt"]] <- PercentageFeatureSet(acc_h, pattern = "^MT-")
head(pbmc@meta.data, 5)
head(acc_h@meta.data, 5)
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# Visualize QC metrics as a violin plot
VlnPlot(acc_h, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(acc_h, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(acc_h, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
acc_h <- subset(acc_h, subset = nFeature_RNA > 100 & nFeature_RNA < 5000 & percent.mt < 5)
# Visualize QC metrics as a violin plot
VlnPlot(acc_h, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
acc_h <- NormalizeData(acc_h, normalization.method = "LogNormalize", scale.factor = 10000)
acc_h <- FindVariableFeatures(acc_h, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(acc_h), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(acc_h)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
plot1 + plot2
rlang::last_trace()
all.genes <- rownames(acc_h)
acc_h <- ScaleData(acc_h, features = all.genes)
# Examine and visualize PCA results a few different ways
print(acc_h[["pca"]], dims = 1:5, nfeatures = 5)
acc_h <- RunPCA(acc_h, features = VariableFeatures(object = acc_h))
# Examine and visualize PCA results a few different ways
print(acc_h[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(acc_h, dims = 1:2, reduction = "pca")
# Examine and visualize PCA results a few different ways
print(acc_h[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(acc_h, dims = 1:2, reduction = "pca")
DimPlot(acc_h, reduction = "pca") + NoLegend()
pdf(file = "plot.pdf", width = 12, height = 20)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
pdf(file = "plot.pdf", width = 12, height = 20)
DimHeatmap(acc_h, dims = 1:15, cells = 500, balanced = TRUE)
dev.off()
ElbowPlot(acc_h)
ElbowPlot(acc_h)
acc_h <- FindNeighbors(acc_h, dims = 1:20)
acc_h <- FindClusters(acc_h, resolution = 0.5)
pbmc <- RunUMAP(acc_h, dims = 1:10)
acc_h <- RunUMAP(acc_h, dims = 1:10)
acc_h <- RunTSNE(acc_h, dims = 1:10)
acc_h <- RunTSNE(acc_h, dims = 1:20)
acc_h <- RunTSNE(acc_h, dims = 1:20)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(acc_h, reduction = "TSNE",label=TRUE)
View(pbmc)
View(acc_h)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(acc_h, reduction = "tsne",label=TRUE)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf(file = "cell_map.pdf", width = 12, height = 14)
DimPlot(acc_h, reduction = "tsne",label=TRUE)
dev.off()
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf(file = "cell_map.pdf", width = 8, height = 6)
DimPlot(acc_h, reduction = "tsne",label=TRUE)
dev.off()
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
pdf(file = "cell_map.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
pdf(file = "cell_map.pdf", width = 8, height = 6)
DimPlot(acc_h, reduction = "tsne",label=TRUE)
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("GAD1", "TAM1", "RELN", "GJA1", "CALB1", "FCGR3A", "LYZ", "PPBP",
"FOLH1"))
dev.off()
pdf(file = "cell_map_gene.pdf", width = 12, height = 14)
FeaturePlot(acc_h, features = c("GAD1", "TAM1", "RELN", "GJA1",
"FOLH1"))
dev.off()
version()
v
v()
update()
install.packages("installr")
require(installr)
updateR()
install.packages("gggenomes")
library(shiny)
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
source("D:/MyFile/git_repo/TRkScan/plotScripts/triangular_heatmap.R", echo=TRUE)
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
install.packages("ggraph")
install.packages("igraph")
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
install.packages("visNetwork")
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
symbol = '='
symbol %in% c('=','X','I')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
runApp('D:/MyFile/git_repo/TRkScan/visualization.R')
library(shiny); runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
runApp('visualization.R')
